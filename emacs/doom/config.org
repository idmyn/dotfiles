* My Doom Config
This [[https://en.wikipedia.org/wiki/Literate_programming][literate]] config file is [[https://orgmode.org/manual/Extracting-source-code.html][tangled]] into =~/.doom.d/config.el= when doom is
run and it notices changes. To achieve this behaviour, I had to [[https://github.com/idmyn/dotfiles/commit/42ea6a64575565c1e9c9807e359d80161ab8fb91][enable the
literate config module]] in =~/.doom.d/init.el=.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-

(setq user-full-name "David Mynors"
      user-mail-address "hello@davidmyno.rs")

(show-smartparens-global-mode 1)

(setq display-line-numbers-type nil)

;; load secrets (encrypted with git-crypt)
(load "~/.emacs.d/secrets.el")

;; when I open emacs I want it to fill my screen
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; instruct scratch buffer to inherit major mode it is summoned from
(setq doom-scratch-buffer-major-mode t)
#+END_SRC

** Theme
I use an [[https://github.com/maio/eink-emacs][eink theme]] and the [[https://input.fontbureau.com][Input font family]]. My use of the `:custom` and
`:custom-face` keywords is inspired by [[https://github.com/a13/emacs.d][a13's literate emacs config]]. I think it's
pretty neat! I struggled at first to figure out how to change faces without `M-x
customize-face`, but with this method I first use `M-x customize-face` to see
what attributes I need to change (and whether the specific face inherits from
any others) and then I add those details as below.
#+BEGIN_SRC emacs-lisp
(use-package! eink-theme
  :custom
  (doom-theme 'eink)
  (doom-font (font-spec :family "Input Mono Narrow" :size 15))
  (doom-variable-pitch-font (font-spec :family "Input Sans Narrow"))
  :config
  (hl-line-mode)
  ;(set-face-italic-p 'italic nil)
  :custom-face
  (hl-line ((t (:inherit highlight :background "lavender")))))
#+END_SRC

** Nifty functions
I expect this section will gradually grow over time, but at the moment it only
contains [[http://xahlee.info][Xah Lee's]] excellent paste-or-paste-previous function.
#+BEGIN_SRC emacs-lisp
(defun xah-paste-or-paste-previous ()
"Paste. When called repeatedly, paste previous.
This command calls `yank', and if repeated, call `yank-pop'.

When `universal-argument' is called first with a number arg, paste that many times.

URL `http://ergoemacs.org/emacs/emacs_paste_or_paste_previous.html'
Version 2017-07-25"
(interactive)
(progn
    (when (and delete-selection-mode (region-active-p))
    (delete-region (region-beginning) (region-end)))
    (if current-prefix-arg
        (progn
        (dotimes ($i (prefix-numeric-value current-prefix-arg))
            (yank)))
    (if (eq real-last-command this-command)
        (yank-pop 1)
        (yank)))))
#+END_SRC

** Keybindings
change vimkeys from hjkl to jkl: (I use karabiner to swap my ; and : keys)
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :nv "j" 'evil-backward-char
   :nv "k" 'evil-next-line
   :nv "l" 'evil-previous-line
   :nv ":" 'evil-forward-char

   :nv "h" 'evil-paste-after
   :nv "H" 'evil-paste-before))
#+END_SRC
adjust magit vimkeys accordingly
#+BEGIN_SRC emacs-lisp
(map!
 (:after magit
   :map magit-mode-map
   :nv "k" 'magit-section-forward
   :nv "l" 'magit-section-backward))
#+END_SRC
adjust ivy minibuffer vimkeys accordingly (I was having issues with this but
found out through `M-x which-key-show-keymap` that there is an
`ivy-posframe-mode-map`, which turned out to be the missing link!)
#+BEGIN_SRC emacs-lisp
(map!
 (:after ivy
   :map (ivy-minibuffer-map ivy-posframe-mode-map)
   "C-j" 'ivy-backward-delete-char
   "C-k" 'ivy-next-line
   "C-l" 'ivy-previous-line
   "C-;" 'ivy-done))
#+END_SRC
easier motion around lines and paragraphs
#+BEGIN_SRC emacs-lisp
(map!
 :after evil
 :nvm "J" 'evil-first-non-blank
 :nvm "K" 'forward-paragraph
 :nvm "L" 'backward-paragraph
 :nvm ";" 'evil-last-non-blank)
#+END_SRC
easier movement between windows (taken from [[https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#easy-window-navigation][here]])
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up
   :ni "M-;" 'evil-window-right)

 (:after evil-org
   :map evil-org-mode-map
   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up))
#+END_SRC
bind jump-backward and jump-forward to more intuitive keys
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   ;; :n "C-i" 'better-jumper-jump-backward ;; this binding causes weird issue with source blocks in org mode
   :n "C-o" 'better-jumper-jump-forward)

 (:after evil-org
   :map evil-org-mode-map
   :n "C-i" 'better-jumper-jump-backward))
#+END_SRC
restore original emacs binding for paste, `save-buffer`, `delete-char`
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :i "C-y" 'xah-paste-or-paste-previous
   :i "C-d" 'delete-char
   :i "C-x C-s" 'save-buffer)

 (:after evil-org
   :map evil-org-mode-map
   :i "C-d" 'delete-char))
#+END_SRC
only use text-scale-increase and text-scale-decrease to change font size (bound by default
to C-- and C-=)
#+BEGIN_SRC
(map!
 (:after evil
  "s--" 'text-scale-decrease
  "s-=" 'text-scale-increase))
#+END_SRC
fix "#" input on UK MacBook keyboard
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "darwin")
  (progn
    (map!
     :i "M-3" (lambda () (interactive) (insert "#")))
    )))
#+END_SRC

** Ivy
instruct ivy-posframe to appear right under cursor with no border
#+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))
  (setq ivy-posframe-border-width 0))
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(map!
 :after evil-org
 :map evil-org-mode-map
 :ni "C-j" 'org-metaleft
 :ni "C-;" 'org-metaright)
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil-org-agenda
   :map evil-org-agenda-mode-map
   :m "k" 'org-agenda-next-line
   :m "l" 'org-agenda-previous-line))
#+END_SRC

** Eshell
*** Keybindings
adjust history navigation bindings to match my adjusted vimkeys, and add
bindings to move between windows
#+BEGIN_SRC emacs-lisp
(defun eshell-setup-keys() ; implementation inspired by evil-collection
  "Set up `evil' bindings for `eshell'."
  (map!
   :map eshell-mode-map
   :i "C-l" 'eshell-previous-matching-input-from-input
   :i "C-k" 'eshell-next-matching-input-from-input
   :i "C-;" 'eshell-send-input

   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up
   :ni "M-;" 'evil-window-right))
(add-hook 'eshell-first-time-mode-hook 'eshell-setup-keys)
#+END_SRC
*** Aliases
#+BEGIN_SRC emacs-lisp
(set-eshell-alias!
 "e" "find-file $1"
 "git" "hub $*"
 "doom" "~/doom-emacs/bin/doom $1")
#+END_SRC
*** eshell-z
[[https://github.com/xuchunyang/eshell-z][eshell-z]] is an emacs port of [[https://github.com/rupa/z][z]], which "keeps track of where youâ€™ve been and how
many commands you invoke there, and provides a convenient way to jump to the
directories you actually use". I also have [[https://github.com/idmyn/dotfiles/blob/53fc9e60f8b9eeafce3fa36df88dfd3424d30198/shell/.zsh_plugins.txt#L1][it]] [[https://github.com/idmyn/dotfiles/blob/53fc9e60f8b9eeafce3fa36df88dfd3424d30198/shell/.zshrc#L10][installed]] in my zsh config (via
[[https://getantibody.github.io][antibody]]) and both installations share the same data file, which is pretty
sweet. I had it configured here but later found out that it's already [[https://github.com/hlissner/doom-emacs/blob/f3a75004e07b847c7d0efc8b38885297a081a828/modules/term/eshell/config.el#L172][included
in doom]] by default!
*** Other settings
tell CLI applications that it's ok to dump really long output into the buffer
#+BEGIN_SRC emacs-lisp
(setenv "PAGER" "cat")
#+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
(map! :leader
        :prefix "n"
        :desc "Open deft" "d" 'deft-find-file)
(after! deft
  (setq deft-directory "~/Dropbox/notes"
        deft-use-filter-string-for-filename t))
#+END_SRC

** Ranger (deer)
#+BEGIN_SRC emacs-lisp
(use-package! ranger
  :commands deer
  :init
  (map!
   :leader
   :prefix "f"
   :desc "Browse files with deer" "d" 'deer)
  :config
  ;; define-key! because map! wouldn't play nice
  (define-key! 'motion ranger-mode-map
    "C-h k" 'describe-key
    "." 'ranger-toggle-dotfiles
    "r" 'wdired-change-to-wdired-mode
    "h" 'ranger-paste

    "j" 'ranger-up-directory
    "k" 'ranger-next-file
    "l" 'ranger-prev-file
    ":" 'ranger-find-file))
#+END_SRC

** JavaScript
Use two spaces for indentation
#+BEGIN_SRC emacs-lisp
(after! js2-mode
  (setq js2-basic-offset 2))
#+END_SRC
configure flycheck to use eslint
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (add-to-list 'flycheck-disabled-checkers 'javascript-jshint)
  ;; remove lsp-ui from flycheck--automatically-enabled-checkers
  (add-to-list 'flycheck-disabled-checkers 'lsp-ui)
  (setq flycheck-javascript-eslint-executable "eslint_d"))
#+END_SRC
** Web (& Svelte)
some web-mode config
#+BEGIN_SRC emacs-lisp
(use-package! web-mode
  :mode "\\.svelte\\'"
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-script-padding 2))
#+END_SRC

* My Doom Config
This [[https://en.wikipedia.org/wiki/Literate_programming][literate]] config file is [[https://orgmode.org/manual/Extracting-source-code.html][tangled]] into =~/.doom.d/config.el= when doom is
run and it notices changes. To achieve this behaviour, I had to [[https://github.com/idmyn/dotfiles/commit/42ea6a64575565c1e9c9807e359d80161ab8fb91][enable the
literate config module]] in =~/.doom.d/init.el=.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-

(setq user-full-name "David Mynors"
      user-mail-address "hello@davidmyno.rs")

(show-smartparens-global-mode 1)

(setq display-line-numbers-type 'relative)

;; load secrets (encrypted with git-crypt)
(load "~/.emacs.d/secrets.el")

;; when I open emacs I want it to fill my screen
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Theme
I use an [[https://github.com/maio/eink-emacs][eink theme]] and the [[https://input.fontbureau.com][Input font family]]. My use of the `:custom` and
`:custom-face` keywords is inspired by [[https://github.com/a13/emacs.d][a13's literate emacs config]]. I think it's
pretty neat! I struggled at first to figure out how to change faces without `M-x
customize-face`, but with this method I first use `M-x customize-face` to see
what attributes I need to change (and whether the specific face inherits from
any others) and then I add those details as below.
#+BEGIN_SRC emacs-lisp
(use-package! eink-theme
  :custom
  (doom-theme 'eink)
  (doom-font (font-spec :family "Input Mono Narrow" :size 15))
  (doom-variable-pitch-font (font-spec :family "Input Sans Narrow"))
  :config
  (hl-line-mode)
  (set-face-italic-p 'italic nil)
  :custom-face
  (hl-line ((t (:inherit highlight :background "lavender")))))
#+END_SRC

** Keybindings
change vimkeys from hjkl to jkl: (I use karabiner to swap my ; and : keys)
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :nv "j" 'evil-backward-char
   :nv "k" 'evil-next-line
   :nv "l" 'evil-previous-line
   :nv ":" 'evil-forward-char

   :nv "h" 'evil-paste-after
   :nv "H" 'evil-paste-before))
#+END_SRC
adjust magit vimkeys accordingly
#+BEGIN_SRC emacs-lisp
(map!
 (:after magit
   :map magit-mode-map
   :nv "k" 'magit-section-forward
   :nv "l" 'magit-section-backward))
#+END_SRC
adjust ivy minibuffer vimkeys accordingly (I was having issues with this but
found out through `M-x which-key-show-keymap` that there is an
`ivy-posframe-mode-map`, which turned out to be the missing link!)
#+BEGIN_SRC emacs-lisp
(map!
 (:after ivy
   :map (ivy-minibuffer-map ivy-posframe-mode-map)
   "C-j" 'ivy-backward-delete-char
   "C-k" 'ivy-next-line
   "C-l" 'ivy-previous-line
   "C-;" 'ivy-done))
#+END_SRC
adjust eshell vimkeys accordingly
#+BEGIN_SRC emacs-lisp
(defun eshell-setup-keys() ; implementation inspired by evil-collection
  "Set up `evil' bindings for `eshell'."
  (map!
   :map eshell-mode-map
   :i "C-l" 'eshell-previous-matching-input-from-input
   :i "C-k" 'eshell-next-matching-input-from-input
   :i "C-;" 'eshell-send-input))
(add-hook 'eshell-first-time-mode-hook 'eshell-setup-keys)
#+END_SRC
easier motion around lines and paragraphs
#+BEGIN_SRC emacs-lisp
(map!
 :after evil
 :nvm "J" 'evil-first-non-blank
 :nvm "K" 'forward-paragraph
 :nvm "L" 'backward-paragraph
 :nvm ";" 'evil-last-non-blank)
#+END_SRC
easier movement between windows (taken from [[https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#easy-window-navigation][here]])
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up
   :ni "M-;" 'evil-window-right)

 (:after evil-org
   :map evil-org-mode-map
   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up))
#+END_SRC
restore original emacs binding for `save-buffer`
#+BEGIN_SRC emacs-lisp
(map!
 :after evil
 :i "C-x C-s" 'save-buffer)
#+END_SRC
fix "#" input on UK MacBook keyboard
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "darwin")
  (progn
    (map!
     :i "M-3" (lambda () (interactive) (insert "#")))
    )))
#+END_SRC

** Ivy
use fuzzy regex matching for candidate selection
#+BEGIN_SRC emacs-lisp
(after! ivy
         (setq ivy-re-builders-alist
               '((t . ivy--regex-fuzzy))))
#+END_SRC
show ivy in posframe right under cursor
#+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))
  (ivy-posframe-mode 1))
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil-org-agenda
   :map evil-org-agenda-mode-map
   :m "k" 'org-agenda-next-line
   :m "l" 'org-agenda-previous-line))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (setq-default flycheck-disabled-checkers '(javascript-jshint)))
#+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
(map! :leader
        :prefix "n"
        :desc "Open deft" "d" 'deft-find-file)
(after! deft
  (setq deft-directory "~/Dropbox/notes"
        deft-use-filter-string-for-filename t))
#+END_SRC

** Ranger (deer)
#+BEGIN_SRC emacs-lisp
(use-package! ranger
  :commands deer
  :init
  (map!
   :leader
   :prefix "f"
   :desc "Browse files with deer" "d" 'deer)
  :config
  ;; define-key! because map! wouldn't play nice
  (define-key! 'motion ranger-mode-map
    "C-h k" 'describe-key
    "." 'ranger-toggle-dotfiles
    "r" 'wdired-change-to-wdired-mode
    "h" 'ranger-paste

    "j" 'ranger-up-directory
    "k" 'ranger-next-file
    "l" 'ranger-prev-file
    ":" 'ranger-find-file))
#+END_SRC

** JavaScript
Use two spaces for indentation
#+BEGIN_SRC emacs-lisp
(after! js2-mode
  (setq js2-basic-offset 2))
#+END_SRC

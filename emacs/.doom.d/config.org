* My Doom Config
This [[https://en.wikipedia.org/wiki/Literate_programming][literate]] config file is [[https://orgmode.org/manual/Extracting-source-code.html][tangled]] into =~/.doom.d/config.el= when doom is
run and it notices changes. To achieve this behaviour, I had to [[https://github.com/idmyn/dotfiles/commit/42ea6a64575565c1e9c9807e359d80161ab8fb91][enable the
literate config module]] in =~/.doom.d/init.el=.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-

(setq user-full-name "David Mynors"
      user-mail-address "hello@davidmyno.rs")

(show-smartparens-global-mode 1)

(setq display-line-numbers-type nil)

;; load secrets (encrypted with git-crypt)
(load "~/.doom.d/secrets.el")

;; when I open emacs I want it to fill my screen
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Theme
I use an [[https://github.com/maio/eink-emacs][eink theme]] and the [[https://input.fontbureau.com][Input font family]]. My use of the `:custom` and
`:custom-face` keywords is inspired by [[https://github.com/a13/emacs.d][a13's literate emacs config]]. I think it's
pretty neat! I struggled at first to figure out how to change faces without `M-x
customize-face`, but with this method I first use `M-x customize-face` to see
what attributes I need to change (and whether the specific face inherits from
any others) and then I add those details as below.
#+BEGIN_SRC emacs-lisp
(use-package! eink-theme
  :custom
  (doom-theme 'eink)
  (doom-font (font-spec :family "Input Mono Narrow" :size 15))
  (doom-variable-pitch-font (font-spec :family "Input Sans Narrow"))
  :config
  (hl-line-mode)
  :custom-face
  (hl-line ((t (:inherit highlight :background "lavender")))))
#+END_SRC
remove minor modes from the mode line
#+BEGIN_SRC emacs-lisp
(define-minor-mode minor-mode-blackout-mode
  "Hides minor modes from the mode line."
  t)

(catch 'done
  (mapc (lambda (x)
          (when (and (consp x)
                     (equal (cadr x) '("" minor-mode-alist)))
            (let ((original (copy-sequence x)))
              (setcar x 'minor-mode-blackout-mode)
              (setcdr x (list "" original)))
            (throw 'done t)))
        mode-line-modes))
#+END_SRC

** Nifty functions
#+BEGIN_SRC emacs-lisp
(defun xah-paste-or-paste-previous ()
  "Paste. When called repeatedly, paste previous.
This command calls `yank', and if repeated, call `yank-pop'.

When `universal-argument' is called first with a number arg, paste that many times.

URL `http://ergoemacs.org/emacs/emacs_paste_or_paste_previous.html'
Version 2017-07-25"
  (interactive)
  (progn
    (when (and delete-selection-mode (region-active-p))
      (delete-region (region-beginning) (region-end)))
    (if current-prefix-arg
        (progn
          (dotimes ($i (prefix-numeric-value current-prefix-arg))
            (yank)))
      (if (eq real-last-command this-command)
          (yank-pop 1)
        (yank)))))

(defun my/zetteldeft-find-file (file &optional empty)
  "Find FILE interactively using the minibuffer.
FILE must exist and be a relative or absolute path, with extension.
If FILE is not inside `deft-directory', create it with zetteldeft rules."
  (interactive
   (list (completing-read "Deft find file: " (deft-find-all-files-no-prefix))))
  (let* ((dir (expand-file-name deft-directory))
         (zdId (zetteldeft-generate-id))
         (zdName (concat zdId " " file)))
    (if (string-match (rx (seq ".org" eol)) file)
        (progn ; if the string ends in ".org" then I've chosen an existing file
          (setq file (concat dir "/" file))
          (deft-open-file file))
      (progn ; else I want to feed input into deft-new-file func
        (deft-new-file-named zdName)
        (unless empty (zetteldeft--insert-title))
        (save-buffer)
        (when (featurep 'evil) (evil-insert-state))))))

(require 'edit-indirect)
(defun md/narrow-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.
  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (edit-indirect-region (region-beginning)
                               (region-end)
                               t))
        (edit-indirect--overlay
         (edit-indirect-commit))
        (org-src-mode
         (org-edit-src-exit))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        ((derived-mode-p 'restclient-mode)
         (restclient-narrow-to-current))
        (t (narrow-to-defun))))
;; Don't ask for confirmation on narrow-to-region
(put 'narrow-to-region 'disabled nil)

(map!
 :leader
 :prefix "t"
 :desc "Toggle narrowing" "n" 'md/narrow-dwim)
#+END_SRC

** Keybindings
change vimkeys from hjkl to jkl: (I use karabiner to swap my ; and : keys)
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :nv "j" 'evil-backward-char
   :nv "k" 'evil-next-line
   :nv "l" 'evil-previous-line
   :nv ":" 'evil-forward-char

   :nv "h" 'evil-paste-after
   :nv "H" 'evil-paste-before))
#+END_SRC
adjust magit vimkeys accordingly
#+BEGIN_SRC emacs-lisp
(map!
 (:after magit
   :map magit-mode-map
   :nv "k" 'magit-section-forward
   :nv "l" 'magit-section-backward))
#+END_SRC
adjust ivy minibuffer vimkeys accordingly (I was having issues with this but
found out through `M-x which-key-show-keymap` that there is an
`ivy-posframe-mode-map`, which turned out to be the missing link!)
#+BEGIN_SRC emacs-lisp
(map!
 (:after ivy
   :map (ivy-minibuffer-map ivy-posframe-mode-map)
   "C-j" 'ivy-backward-delete-char
   "C-k" 'ivy-next-line
   "C-l" 'ivy-previous-line
   "C-;" 'ivy-done))
#+END_SRC
same thing for comint mode
#+BEGIN_SRC emacs-lisp
(map!
 :map comint-mode-map
 :i "C-k" 'comint-next-matching-input-from-input
 :i "C-l" 'comint-previous-matching-input-from-input)
#+END_SRC
easier motion around lines and paragraphs
#+BEGIN_SRC emacs-lisp
(map!
 :after evil
 :nvm "J" 'evil-first-non-blank
 :nvm "K" 'forward-paragraph
 :nvm "L" 'backward-paragraph
 :nvm ";" 'evil-last-non-blank)
#+END_SRC
easier movement between windows and frames (taken from [[https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org#easy-window-navigation][here]])
#+BEGIN_SRC emacs-lisp
(use-package! framemove
  :custom (framemove-hook-into-windmove t))
(map!
 (:after evil
   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up
   :ni "M-;" 'evil-window-right)

 (:after evil-org
   :map evil-org-mode-map
   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up))
#+END_SRC
bind jump-backward and jump-forward to more intuitive keys
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :n "C-j" 'better-jumper-jump-backward
   :n "C-:" 'better-jumper-jump-forward)
 (:after org
   :map org-mode-map
   :n "C-k" 'better-jumper-jump-backward))
#+END_SRC
handy to have an insert-mode binding to jump to a new line above
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :i "C-o" '+default/newline-above))
#+END_SRC
restore original emacs binding for paste, `save-buffer`, `delete-char`
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :i "C-y" 'xah-paste-or-paste-previous
   :i "C-d" 'delete-char
   :i "C-x C-s" 'save-buffer)

 (:after evil-org
   :map evil-org-mode-map
   :i "C-d" 'delete-char))
#+END_SRC
only use text-scale-increase and text-scale-decrease to change font size (bound by default
to C-- and C-=)
#+BEGIN_SRC
(map!
 (:after evil
  :map global-map
  "s--" 'text-scale-decrease
  "s-=" 'text-scale-increase))
#+END_SRC
fix "#" input on UK MacBook keyboard
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "darwin")
  (progn
    (map!
     "M-3" (lambda () (interactive) (insert "#")))
    )))
#+END_SRC

** Dash
#+BEGIN_SRC emacs-lisp
(map! :n "D" 'dash-at-point)
#+END_SRC
** Evil
tweak a couple of evil behaviours
#+BEGIN_SRC emacs-lisp
(after! evil
  (setq evil-split-window-below t)
  (setq evil-vsplit-window-right t)
  (setq evil-insert-state-message nil)
  (setq +evil-want-o/O-to-continue-comments nil)
  (advice-remove #'newline-and-indent #'+default--newline-indent-and-continue-comments-a))
#+END_SRC
undo-tree bindings
#+BEGIN_SRC emacs-lisp
(map!
 :after undo-tree
 :map undo-tree-visualizer-mode-map
 :m "k" 'undo-tree-visualize-redo
 :m "l" 'undo-tree-visualize-undo
 :m ":" 'undo-tree-visualize-switch-branch-right
 :m "j" 'undo-tree-visualize-switch-branch-left)
#+END_SRC
** Ivy
instruct ivy-posframe to appear right under cursor with no border
#+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))
  (setq ivy-posframe-border-width 0))
#+END_SRC
exceptions to the fuzzy search rule set in init.el
#+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-re-builders-alist
        '((counsel-imenu . ivy--regex-plus)
          (t . ivy--regex-fuzzy))))
#+END_SRC

** Company
I tend to find the company auto-complete popup quite intrusive, so I disable it
globally. I do occasionaly find it useful, though, so I have a toggle mapped to
"SPC t c".
#+BEGIN_SRC emacs-lisp
(global-company-mode -1)
(after! eshell
    (remove-hook 'eshell-mode-hook #'+eshell-init-company-h))

(setq company-idle-delay 0)

(map! :leader
        :prefix "t"
        :desc "Toggle company mode" "c" 'company-mode)
#+END_SRC
** Eldoc
I want to eldoc disabled in most modes
#+BEGIN_SRC emacs-lisp
(global-eldoc-mode -1)
(remove-hook 'org-mode-hook #'org-eldoc-load)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
(setq org-imenu-depth 10)
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(map!
 :after evil-org
 :map evil-org-mode-map
 :ni "C-j" 'org-metaleft
 :ni "C-;" 'org-metaright)
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil-org-agenda
   :map evil-org-agenda-mode-map
   :m "k" 'org-agenda-next-line
   :m "l" 'org-agenda-previous-line))
#+END_SRC
** Eshell
*** Keybindings
adjust history navigation bindings to match my adjusted vimkeys, and add
bindings to move between windows
#+BEGIN_SRC emacs-lisp
(defun eshell-setup-keys() ; implementation inspired by evil-collection
  "Set up `evil' bindings for `eshell'."
  (map!
   :map eshell-mode-map
   :i "C-l" 'eshell-previous-matching-input-from-input
   :i "C-k" 'eshell-next-matching-input-from-input
   :i "C-;" 'eshell-send-input

   :ni "M-j" 'evil-window-left
   :ni "M-k" 'evil-window-down
   :ni "M-l" 'evil-window-up
   :ni "M-;" 'evil-window-right))
(add-hook 'eshell-first-time-mode-hook 'eshell-setup-keys)
#+END_SRC
*** Aliases
#+BEGIN_SRC emacs-lisp
(set-eshell-alias!
 "e" "find-file $1"
 "git" "hub $*"
 "doom" "~/.emacs.d/bin/doom $1")
#+END_SRC
*** eshell-z
[[https://github.com/xuchunyang/eshell-z][eshell-z]] is an emacs port of [[https://github.com/rupa/z][z]], which "keeps track of where you’ve been and how
many commands you invoke there, and provides a convenient way to jump to the
directories you actually use". I also have [[https://github.com/idmyn/dotfiles/blob/53fc9e60f8b9eeafce3fa36df88dfd3424d30198/shell/.zsh_plugins.txt#L1][it]] [[https://github.com/idmyn/dotfiles/blob/53fc9e60f8b9eeafce3fa36df88dfd3424d30198/shell/.zshrc#L10][installed]] in my zsh config (via
[[https://getantibody.github.io][antibody]]) and both installations share the same data file, which is pretty
sweet. I had it configured here but later found out that it's already [[https://github.com/hlissner/doom-emacs/blob/f3a75004e07b847c7d0efc8b38885297a081a828/modules/term/eshell/config.el#L172][included
in doom]] by default!
*** Other settings
tell CLI applications that it's ok to dump really long output into the buffer
#+BEGIN_SRC emacs-lisp
(setenv "PAGER" "cat")
#+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
;; (map! :leader
;;         :prefix "n"
;;         :desc "Open deft" "d" 'deft-find-file)
;; (after! deft
;;   (setq deft-directory "~/Dropbox/notes"
;;         deft-use-filter-string-for-filename t))
#+END_SRC
*** Zetteldeft
#+BEGIN_SRC emacs-lisp
(use-package! zetteldeft
  :custom
  (deft-directory "~/Dropbox/org/zettelkasten")
  :config
  (map!
   :leader
   :prefix "d"
   :desc "Create new note and open" "n" 'zetteldeft-new-file
   :desc "Create new note and insert link" "N" 'zetteldeft-new-file-and-link
   :desc "Pick a note and insert a link" "i" 'zetteldeft-find-file-id-insert
   :desc "Follow a link" "f" 'zetteldeft-follow-link
   :desc "Select and search a link’s ID" "l" 'zetteldeft-avy-link-search
   :desc "Select a tag and search for it" "t" 'zetteldeft-avy-tag-search
   :desc "Search for a note" "s" 'my/zetteldeft-find-file
   :desc "Search for thing at point" "S" 'zetteldeft-search-at-point
   :desc "Search for id of current file" "c" 'zetteldeft-search-current-id))
#+END_SRC

** Ranger (deer)
#+BEGIN_SRC emacs-lisp
(use-package! ranger
  :commands deer
  :init
  (map!
   :leader
   :prefix "f"
   :desc "Browse files with deer" "d" 'deer)
  :config
  ;; define-key! because map! wouldn't play nice
  (define-key! 'motion ranger-mode-map
    "C-h k" 'describe-key
    "." 'ranger-toggle-dotfiles
    "r" 'wdired-change-to-wdired-mode
    "h" 'ranger-paste

    "j" 'ranger-up-directory
    "k" 'ranger-next-file
    "l" 'ranger-prev-file
    ":" 'ranger-find-file))
#+END_SRC

** JavaScript
Use two spaces for indentation
#+BEGIN_SRC emacs-lisp
(after! js2-mode
  (setq js2-basic-offset 2))
#+END_SRC
configure flycheck to use eslint
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (add-to-list 'flycheck-disabled-checkers 'javascript-jshint)
  ;; remove lsp-ui from flycheck--automatically-enabled-checkers
  (add-to-list 'flycheck-disabled-checkers 'lsp-ui)
  (setq flycheck-javascript-eslint-executable "eslint_d"))
#+END_SRC
** Web (& Svelte)
some web-mode config
#+BEGIN_SRC emacs-lisp
(setq css-indent-offset 2)
(add-hook 'css-mode-hook (lambda () (flycheck-mode -1)))

(use-package! web-mode
  :mode "\\.svelte\\'"
  :custom
  (web-mode-enable-current-element-highlight t)
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-style-padding 2)
  (web-mode-code-indent-offset 2)
  (web-mode-script-padding 2))
#+END_SRC
** Markdown & Org
set the =grip-binary-path= for [[https://github.com/seagle0128/grip-mode][grip-mode]], fix some keybinds
#+BEGIN_SRC emacs-lisp
(setq grip-binary-path "/usr/local/bin/grip")

(map!
 (:after markdown-mode
   :map evil-markdown-mode-map
   :i "C-d" 'delete-char
   :ni "C-;" 'self-insert-command))
#+END_SRC
** Common Lisp
#+BEGIN_SRC emacs-lisp
(map!
 (:after sly
   :map sly-mrepl-mode-map
   :i "C-k" 'sly-mrepl-next-input-or-button
   :i "C-l" 'sly-mrepl-previous-input-or-button))
#+END_SRC
